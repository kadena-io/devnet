# Containers
# Chainweb Node
# + a miner
# Hack-a-chain indexer service
# Postgres
# Local Stack
configs:
  chainweb-node.common:
    file: ${PWD}/config/chainweb-node.common.yaml
  chainweb-node.logging:
    file: ./config/chainweb-node.logging.yaml

services:

# ########################################################################## #
# Bootstrap Node
# For a minimal config, this is the only node we need
#
  chainweb-node:
    extends:
      file: node.yaml
      service: node
    platform: linux/amd64
    hostname: bootstrap-node
    #    user: ${UID:-1000}:${GID:-1000}
    labels:
      com.chainweb.devnet.description: "Devnet Bootstrap Node"
      com.chainweb.devnet.bootstrap-node: ""
    volumes:
    - ${PWD}/devnet-bootstrap-node.cert.pem:/chainweb/devnet-bootstrap-node.cert.pem:ro
    - ${PWD}/devnet-bootstrap-node.key.pem:/chainweb/devnet-bootstrap-node.key.pem:ro
    - ${PWD}/db:/chainweb/db
    command:
    - --p2p-certificate-chain-file=/chainweb/devnet-bootstrap-node.cert.pem
    - --p2p-certificate-key-file=/chainweb/devnet-bootstrap-node.key.pem
    - --p2p-hostname=bootstrap-node
    - --bootstrap-reachability=1
    - --cluster-id=devnet-indexer
    - --p2p-max-session-count=2
    - --mempool-p2p-max-session-count=2
    - --known-peer-info=YNo7pXthYQ9RQKv1bbpQf2R5LcLYA3ppx2BL2Hf8fIM@bootstrap-node:1789
    - --log-level=info
    - --enable-mining-coordination
    - --mining-public-key=${MINER_PUBLIC_KEY}
    - --header-stream
    - --allowReadsInLocal
    - --database-directory=/chainweb/db
    - --disable-pow
    expose:
      - "1848"
      - "1789"
    environment:
    - DISABLE_POW_VALIDATION

  simulation-miner:
    #  user: ${UID:-1000}:${GID:-1000}
    image: "${MINING_CLIENT_IMAGE}"
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      chainweb-node:
        condition: service_healthy
    entrypoint: "/chainweb-mining-client/chainweb-mining-client"
    command:
    - --public-key=${MINER_PUBLIC_KEY}
    - --node=bootstrap-node:1848
    - --worker=constant-delay
    - --thread-count=1
    - --log-level=info
    - --no-tls
    - --constant-delay-block-time=10
    ports:
    - target: 1917
      published: 1917
      protocol: tcp

# ########################################################################## #
# Nginx API Proxy
  # api-proxy:
  #   labels:
  #     com.chainweb.devnet.description: "Devnet API Proxy"
  #     com.chainweb.devnet.api-proxy: ""
  #   depends_on:
  #     bootstrap-node:
  #       condition: service_healthy
  #   image: amd64/nginx:latest
  #   platform: linux/amd64
  #   volumes:
  #   - ${PWD}/config/nginx.api.minimal.conf:/etc/nginx/conf.d/default.conf
  #   ports:
  #   - target: 80
  #     published: ${HOST_SERVICE_PORT}
  #     protocol: tcp


# ########################################################################## #
#
# hackachain indexer components
#
# ########################################################################## #

  certs:
    image: alpine
    volumes:
      - ./indexer/certs:/certs
    entrypoint: |
      /bin/sh -c '
      apk add --no-cache openssl &&
      mkdir -p /certs &&
      openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
        -keyout /certs/server.key \
        -out /certs/server.crt \
        -subj "/C=US/ST=Blockchain/L=Kadena/O=Hackachain/OU=Indexer/CN=localhost" &&
      chown -R 999:999 /certs &&
      chmod 600 /certs/server.key
      '

  postgres:
    hostname: indexer-postgres
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    command: [
      "postgres",
      "-c", "ssl=on",
      "-c", "ssl_cert_file=/var/lib/postgresql/certs/server.crt",
      "-c", "ssl_key_file=/var/lib/postgresql/certs/server.key"
    ]
    ports:
      - "5432:5432"
    volumes:
      - ${PWD}/indexer/postgres:/var/lib/postgresql/data
      - ./indexer/certs:/var/lib/postgresql/certs:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 1s
      timeout: 5s
      retries: 10
    depends_on:
      certs:
        condition: service_completed_successfully

  ## Indexer Startup

  # Run migrations when databases are up
  indexer-migrations:
    # user: ${UID:-1000}:${GID:-1000}
    build:
      context: ${INDEXER_REPO}
      dockerfile: Dockerfile.development
    command: ["yarn", "create:database"]
    env_file:
      - .env
      - .env.indexer
    depends_on:
      postgres:
        condition: service_healthy
      chainweb-node:
        condition: service_healthy

  # GraphQL API
  indexer-kadenagraphql:
    hostname: indexer-kadenagraphql
    user: ${UID:-1000}:${GID:-1000}
    build:
      context: ${INDEXER_REPO}
      dockerfile: Dockerfile.development
    command: ["yarn", "dev:graphql"]
    env_file:
      - .env
      - .env.indexer
    ports:
      - "4000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      chainweb-node:
        condition: service_healthy
      indexer-migrations:
        condition: service_completed_successfully

  # Main indexer service
  indexer:
    build:
      context: ${INDEXER_REPO}
      dockerfile: Dockerfile.development
    command: ["yarn", "dev:streaming"]
    env_file:
      - .env
      - .env.indexer
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      chainweb-node:
        condition: service_healthy
      indexer-kadenagraphql:
        condition: service_started


networks:
  default:
    name: chainweb-devnet-indexer
