# Containers
# Chainweb Node
# + a miner
# Hack-a-chain indexer service
# Postgres
# Local Stack
configs:
  chainweb-node.common:
    file: ${PWD}/config/chainweb-node.common.yaml
  chainweb-node.logging:
    file: ./config/chainweb-node.logging.yaml

services:

# ########################################################################## #
# Bootstrap Node
# For a minimal config, this is the only node we need
#
  bootstrap-node:
    extends:
      file: node.yaml
      service: node
    platform: linux/amd64
    labels:
      com.chainweb.devnet.description: "Devnet Bootstrap Node"
      com.chainweb.devnet.bootstrap-node: ""
    volumes:
    - ${PWD}/devnet-bootstrap-node.cert.pem:/chainweb/devnet-bootstrap-node.cert.pem:ro
    - ${PWD}/devnet-bootstrap-node.key.pem:/chainweb/devnet-bootstrap-node.key.pem:ro
    - ${PWD}/db:/chainweb/db
    command:
    - --p2p-certificate-chain-file=/chainweb/devnet-bootstrap-node.cert.pem
    - --p2p-certificate-key-file=/chainweb/devnet-bootstrap-node.key.pem
    - --p2p-hostname=bootstrap-node
    - --bootstrap-reachability=1
    - --cluster-id=devnet-minimal
    - --p2p-max-session-count=2
    - --mempool-p2p-max-session-count=2
    - --known-peer-info=YNo7pXthYQ9RQKv1bbpQf2R5LcLYA3ppx2BL2Hf8fIM@bootstrap-node:1789
    - --log-level=info
    - --enable-mining-coordination
    - --mining-public-key=${MINER_PUBLIC_KEY}
    - --header-stream
    - --rosetta
    - --allowReadsInLocal
    - --database-directory=/chainweb/db
    - --disable-pow
    expose:
      - "1848"
      - "1789"
    environment:
    - DISABLE_POW_VALIDATION

  simulation-miner:
    container_name: simulation-miner
    image: "${MINING_CLIENT_IMAGE}"
    platform: linux/amd64
    restart: unless-stopped
    depends_on:
      bootstrap-node:
        condition: service_healthy
    entrypoint: "/chainweb-mining-client/chainweb-mining-client"
    command:
    - --public-key=${MINER_PUBLIC_KEY}
    - --node=bootstrap-node:1848
    - --worker=constant-delay
    - --thread-count=1
    - --log-level=info
    - --no-tls
    - --constant-delay-block-time=10
    ports:
    - target: 1917
      published: 1917
      protocol: tcp

# ########################################################################## #
# Nginx API Proxy
  api-proxy:
    labels:
      com.chainweb.devnet.description: "Devnet API Proxy"
      com.chainweb.devnet.api-proxy: ""
    depends_on:
      bootstrap-node:
        condition: service_healthy
    image: amd64/nginx:latest
    platform: linux/amd64
    volumes:
    - ${PWD}/config/nginx.api.minimal.conf:/etc/nginx/conf.d/default.conf
    ports:
    - target: 80
      published: ${HOST_SERVICE_PORT}
      protocol: tcp


# ########################################################################## #
#
# hackachain indexer components
#
# ########################################################################## #
  
  # S3 bucket emulation
  localstack:
    container_name: localstack_main
    image: localstack/localstack:s3-latest
    ports:
      - "4566:4566"
    environment:
      SERVICES: s3
      DEBUG: 1
      PERSISTENCE: 1
    env_file:
      - .env
    volumes:
      - ${PWD}/indexer/localstack:/var/lib/localstack
      - ${PWD}/indexer/init-s3.py:/etc/localstack/init/ready.d/init-s3.py

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    command: -c ssl=off
    ports:
      - "5432:5432"
    volumes:
      - ${PWD}/indexer/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 1s
      timeout: 5s
      retries: 10

  # Main indexer service
  indexer:
    build:
      context: ${INDEXER_REPO}
      dockerfile: Dockerfile
    command: ["node", "dist/index.js", "--run"]
    env_file:
      - .env
    environment:
      SYNC_BASE_URL: "http://localhost:1848/chainweb/0.0"
      SYNC_MIN_HEIGHT: 0
      SYNC_FETCH_INTERVAL_IN_BLOCKS: 50
      SYNC_TIME_BETWEEN_REQUESTS_IN_MS: 5000
      SYNC_ATTEMPTS_MAX_RETRY: 10
      SYNC_ATTEMPTS_INTERVAL_IN_MS: 2000
      SYNC_NETWORK: "devnet"
      NODE_API_URL: http://localhost:1848
      RUN_GRAPHQL_ON_START: false
      KADENA_GRAPHQL_API_PORT: 3001
    ports:
      - "3000:3000"
    depends_on:
      localstack:
        condition: service_healthy
      postgres:
        condition: service_healthy
      bootstrap-node:
        condition: service_healthy
      api-proxy:
        condition: service_started

  indexer-kadenagraphql:
    build:
      context: ${INDEXER_REPO}
      dockerfile: Dockerfile
    command: ["node", "dist/index.js", "--graphqlServer"]
    env_file:
      - .env
    environment:
      SYNC_BASE_URL: "http://localhost:1848/chainweb/0.0"
      SYNC_MIN_HEIGHT: 0
      SYNC_FETCH_INTERVAL_IN_BLOCKS: 50
      SYNC_TIME_BETWEEN_REQUESTS_IN_MS: 5000
      SYNC_ATTEMPTS_MAX_RETRY: 10
      SYNC_ATTEMPTS_INTERVAL_IN_MS: 2000
      SYNC_NETWORK: "devnet"
      NODE_API_URL: http://localhost:1848
      # this run_graphql is for the hackachain graphql, not the kadena one
      RUN_GRAPHQL_ON_START: false
      KADENA_GRAPHQL_API_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      localstack:
        condition: service_healthy
      postgres:
        condition: service_healthy
      bootstrap-node:
        condition: service_healthy
      api-proxy:
        condition: service_started

networks:
  default:
    name: chainweb-indexer-devnet
